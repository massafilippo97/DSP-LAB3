openapi: 3.0.1
info:
  title: API set for the To Do Manager web app [DSP version] 
  version: "1.0"
servers:
- url: /
tags:
- name: tasks
  description: Basic operations about users' tasks
- name: assigned tasks
  description: Operations related to the assignments of tasks
- name: task images
  description: Operations related to the image(s) associated with a task
- name: users
  description: Operations about user login process
- name: login
  description: Operations about user login process
paths:
  /tasks:
    get:
      tags:
      - tasks
      security:
        - cookieAuth: []
      summary: Retrieve all the [logged user's] tasks
      operationId: tasksGET
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
                  totalItems:
                    type: integer
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  _links:
                    type: object 
              example:
                totalPages: 0
                currentPage: 0
                totalItems: 0
                tasks: [ { 
                  "id": 1,
                  "description": "a very detailed description",
                  "important": 0,
                  "private": 1,
                  "projects": "Personal",
                  "deadline": "2000-01-23T04:56:07.000+00:00",
                  "completed": 0,
                  "owner": 2
                 }]
                _links:
                  next: "url"
                  operation1: "url"
                  operation2: "url"
        "401":
          description: Unauthorized                
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Tasks
    post:
      tags:
      - tasks
      security:
        - cookieAuth: []
      summary: "Add a new task (ID is automatically generated by the server and the\
        \ creator becomes its owner [assignees list is left empty])"
      operationId: tasksPOST
      requestBody:
        description: It is required a single Task object
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/Task'
              example: 
                 { 
                  "id": 1,
                  "description": "a very detailed description",
                  "important": 0,
                  "private": 1,
                  "projects": "Personal",
                  "deadline": "2000-01-23T04:56:07.000+00:00",
                  "completed": 0,
                  "owner": 2
                 } 
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:  
                    type: object
                    items:
                      $ref: '#/components/schemas/Task'
                  _links:
                    type: object
              example:
                task:  { 
                  "id": 1,
                  "description": "a very detailed description",
                  "important": 0,
                  "private": 1,
                  "projects": "Personal",
                  "deadline": "2000-01-23T04:56:07.000+00:00",
                  "completed": 0,
                  "owner": 2
                 }
                _links:
                  next: "url"
                  operation1: "url"
                  operation2: "url"
        "401":
          description: Unauthorized  
        "400":
          description: Bad Request ##teoricamente restituito dal middleware validator
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Tasks
  /tasks/public: 
    get:
      tags:
      - tasks
      summary: Retrieve all the public tasks
      operationId: tasksPublicGET
      parameters:
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: 'The id of the requested page (if absent, the first page is returned)'
        - in: query
          name: size
          required: false
          schema:
            type: integer
          description: 'The size of the requested page (if absent, the size is equal to 10)'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
                  totalItems:
                    type: integer
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  _links:
                    type: object 
              example:
                totalPages: 0
                currentPage: 0
                totalItems: 0
                tasks: [ { 
                  "id": 1,
                  "description": "a very detailed description",
                  "important": 0,
                  "private": 1,
                  "projects": "Personal",
                  "deadline": "2000-01-23T04:56:07.000+00:00",
                  "completed": 0,
                  "owner": 2
                 }]
                _links:
                  next: "url"
                  operation1: "url"
                  operation2: "url"
        "503":
          description: Internal Server Error\
      x-swagger-router-controller: Tasks
  /tasks/assignedToMe:
    get:
      tags:
      - tasks
      security:
        - cookieAuth: []
      summary: Retrieve all the tasks assigned to a logged user
      operationId: tasksAssignedToMeGET
      parameters:
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: 'The id of the requested page (if absent, the first page is returned)'
        - in: query
          name: size
          required: false
          schema:
            type: integer
          description: 'The size of the requested page (if absent, the size is equal to 10)'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
                  totalItems:
                    type: integer
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  _links:
                    type: object 
              example:
                totalPages: 0
                currentPage: 0
                totalItems: 0
                tasks: [ { 
                  "id": 1,
                  "description": "a very detailed description",
                  "important": 0,
                  "private": 1,
                  "projects": "Personal",
                  "deadline": "2000-01-23T04:56:07.000+00:00",
                  "completed": 0,
                  "owner": 2
                 }]
                _links:
                  next: "url"
                  operation1: "url"
                  operation2: "url"
        "401":
          description: Unauthorized  
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Tasks
  /tasks/createdByMe:
    get:
      tags:
      - tasks
      security:
        - cookieAuth: []
      summary: Retrieve all the tasks created by a logged user
      operationId: tasksCreatedByMeGET
      parameters:
        - in: query
          name: pageNo
          required: false
          schema:
            type: integer
          description: 'The id of the requested page (if absent, the first page is returned)'
        - in: query
          name: size
          required: false
          schema:
            type: integer
          description: 'The size of the requested page (if absent, the size is equal to 10)'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalPages:
                    type: integer
                  currentPage:
                    type: integer
                  totalItems:
                    type: integer
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  _links:
                    type: object 
              example:
                totalPages: 0
                currentPage: 0
                totalItems: 0
                tasks: [ { 
                  "id": 1,
                  "description": "a very detailed description",
                  "important": 0,
                  "private": 1,
                  "projects": "Personal",
                  "deadline": "2000-01-23T04:56:07.000+00:00",
                  "completed": 0,
                  "owner": 2
                 }]
                _links:
                  next: "url"
                  operation1: "url"
                  operation2: "url"
        "401":
          description: Unauthorized  
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Tasks
  
  /tasks/{TaskId}:
    get:
      tags:
      - tasks
      security:
        - cookieAuth: []
      summary: Retrieve the specific tasks by its ID
      operationId: tasksTaskIdGET
      parameters:
      - name: TaskId
        in: path
        description: Task id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:  
                    type: object
                    items:
                      $ref: '#/components/schemas/Task'
                  _links:
                    type: object
              example:
                task:  { 
                  "id": 1,
                  "description": "a very detailed description",
                  "important": 0,
                  "private": 1,
                  "projects": "Personal",
                  "deadline": "2000-01-23T04:56:07.000+00:00",
                  "completed": 0,
                  "owner": 2
                 }
                _links:
                  next: "url"
                  operation1: "url"
                  operation2: "url"
        "401":
          description: Unauthorized  
        "403":
          description: Forbbiden  
        "404":
          description: Task not found
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Tasks
    put:
      tags:
      - tasks
      security:
        - cookieAuth: []
      summary: "Update an existing task, identified by the specified ID (if the requester\
        \ is the owner) [completed property cannot be changed here]"
      operationId: tasksTaskIdPUT
      parameters:
      - name: TaskId
        in: path
        description: Task id to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: It is required a single Task object
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/Task'
              example: 
                 { 
                  "id": 1,
                  "description": "a very detailed description",
                  "important": 0,
                  "private": 1,
                  "projects": "Personal",
                  "deadline": "2000-01-23T04:56:07.000+00:00",
                  "completed": 0,
                  "owner": 2
                 } 
      responses:
        "204":
          description: No Content (successfully created)
        "400":
          description: Bad Request
        "401":
          description: Unauthorized  
        "403":
          description: Forbidden  
        "404":
          description: Task not found
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Tasks
    delete:
      tags:
      - tasks
      security:
        - cookieAuth: []
      summary: Delete an existing task by ID (if the requester is the owner)
      operationId: tasksTaskIdDELETE
      parameters:
      - name: TaskId
        in: path
        description: Task id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized  
        "403":
          description: Forbbiden  
        "404":
          description: Task not found
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Tasks

  /tasks/{TaskId}/markTask:
      put:
        tags:
        - tasks
        security:
        - cookieAuth: []
        summary: Change the specified Task's status as completed  
        operationId: tasksTaskIdMarkTaskPUT
        parameters:
        - name: TaskId
          in: path
          description: Task id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
        responses:
          "204":
            description: No Content (successfully created)
          "400":
            description: Bad Request
          "401":
            description: Unauthorized  
          "403":
            description: Forbbiden  
          "404":
            description: Task not found
          "503":
            description: Internal Server Error
        x-swagger-router-controller: Tasks  

  /tasks/{TaskId}/assignedTo:
    get:
      tags:
      - assigned tasks
      security:
        - cookieAuth: []
      summary: Retrieve the list of all the assignes of that task
      operationId: tasksTaskIdAssignedToGET
      parameters:
      - name: TaskId
        in: path
        description: Task id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  _links:
                    type: object 
                example:
                  users: [
                    {
                      "name": "name",
                      "id": "id",
                      "email": "example@exmple.com"
                    }
                  ]
                  _links: 
                    operation1: "url"
                    operation2: "url"
        "401":
          description: Unauthorized
        "404":
          description: Task Not Found
        "503":
          description: Internal Server Error
      x-swagger-router-controller: AssignedTasks
  /tasks/{TaskId}/assignedTo/{UserId}:
    put:
      tags:
      - assigned tasks
      security:
        - cookieAuth: []
      summary: "Assign an [already existing] user to the assignees user list of that\
        \ task"
      operationId: tasksTaskIdAssignedToUserIdPUT
      parameters:
      - name: TaskId
        in: path
        description: Task id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: UserId
        in: path
        description: User id to update inside the assigned user list
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content (successfully created)
        "400":
          description: Bad Request
        "401":
          description: Unauthorized  
        "403":
          description: Forbbiden  
        "404":
          description: Task/User not found
        "503":
          description: Internal Server Error
      x-swagger-router-controller: AssignedTasks
    delete:
      tags:
      - assigned tasks
      security:
        - cookieAuth: []
      summary: Remove an user from the assignees user list of that task
      operationId: tasksTaskIdAssignedToUserIdDELETE
      parameters:
      - name: TaskId
        in: path
        description: Task id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: UserId
        in: path
        description: User id to remove inside the assignees user list
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized  
        "403":
          description: Forbbiden  
        "404":
          description: Task not found
        "503":
          description: Internal Server Error
      x-swagger-router-controller: AssignedTasks

  /tasks/{TaskId}/images:
    post:
      tags:
      - task images
      security:
        - cookieAuth: []
      summary: "Add a new image to a speficic task (Image ID is automatically generated by the server)"
      operationId: tasksTaskIdImagesPOST
      requestBody:
        description: image to assign to the task
        content:
          multipart/form-data:
            schema:
              type: object
              properties: # Request parts
                 image:
                  type: string
                  format: binary
            encoding: 
                image: 
                  contentType: image/png, image/jpg, image/gif 
      responses:
        "201":
          description: Created
          content:
            multipart/form-data:
              schema:
                type: object
                properties: # Request parts
                  image:
                      type: string
                      format: binary
              encoding: 
                  image: 
                    contentType: image/png, image/jpg, image/gif 
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '415':
          description: Unsupported Media Type
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Tasks    
  
  /tasks/{TaskId}/images/{ImageId}:
    get:
      tags:
      - task images
      security:
        - cookieAuth: []
      summary: Retrieve the requested image associated to the speficic task
      operationId: tasksTaskIdImagesImageIdGET
      parameters:
      - name: TaskId
        in: path
        description: Task id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: ImageId
        in: path
        description: Image id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Ok
          content:
            multipart/form-data:
              schema:
                type: object
                properties: # Request parts
                  image:
                      type: string
                      format: binary
              encoding: 
                  image: 
                    contentType: image/png, image/jpg, image/gif 
        "401":
          description: Unauthorized       
        "404":
          description: Not Found
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Tasks 
    delete:
      tags:
      - task images
      security:
        - cookieAuth: []
      summary: Remove an user from the assignees user list of that task
      operationId: tasksTaskIdImagesImageIdDELETE
      parameters:
      - name: TaskId
        in: path
        description: Task id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: ImageId
        in: path
        description: Image id of the image that needs to be removed from the task speficic image list
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized  
        "403":
          description: Forbbiden  
        "404":
          description: Not found
        "503":
          description: Internal Server Error
      x-swagger-router-controller: AssignedTasks
  /users:
    get:
      tags:
        - users
      security:
        - cookieAuth: []
      summary: Get information about the users
      description: >-
        The available information (passwords excluded) about all the
        users is retrieved.
      operationId: usersGET
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  _links:
                    type: object 
                example:
                  users: [
                    {
                      "name": "name",
                      "id": "id",
                      "email": "example@exmple.com"
                    }
                  ]
                  _links: 
                    operation1: "url"
                    operation2: "url"
        '401':
          description: Unauthorized
          content: {} 
  /users/{UserId}:
    get:
      tags:
      - users
      security:
        - cookieAuth: []
      summary: Retrieve the details of the speficic user
      operationId: usersUserIdGET
      parameters:
      - name: UserId
        in: path
        description: User id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    $ref: '#/components/schemas/User'
                  _links:
                    type: object 
                example:
                  user: 
                    {
                      "name": "name",
                      "id": "id",
                      "email": "example@exmple.com"
                    }
                  _links: 
                    operation1: "url"
                    operation2: "url"
        "401":
          description: Unauthorized       
        "404":
          description: User Not Found
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Tasks
  /login:
    post:
      tags:
      - login 
      summary: Perform the login process
      operationId: loginPOST
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Login
  /logout:
    post:
      tags:
      - login 
      summary: Perform the login process
      operationId: logoutPOST
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
        "503":
          description: Internal Server Error
      x-swagger-router-controller: Login
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        password:
          maximum: 20
          minimum: 6
          type: string
      example:
        password: password
        name: name
        id: id
        email: ""
    Task:
      required:
      - description
      - id
      type: object
      properties:
        id:
          type: number
        description:
          maxLength: 160
          type: string
        important:
          type: number
          default: 0
          minimum: 0
          maximum: 1
        private:
          type: number
          default: 1
          minimum: 0
          maximum: 1
        projects:
          type: string
          enum:
          - Personal
          - WA1_Project
          - WA2_Project
          - DSP_Project
        deadline:
          pattern: "([0-9][0-9][2-9][0-9])"
          type: string
          format: date-time
        completed:
          type: number
          default: 0
          minimum: 0
          maximum: 1
        owner:
          type: number 
        links:
          type: array
          items:
            type: string
      example:
        id: 1
        description: a very detailed description
        important: 0
        private: 1
        projects: "Personal"
        deadline: 2000-01-23T04:56:07.000+00:00 
        completed: 0
        owner: 2
  securitySchemes:
    cookieAuth:
      description: JWT to identify the authenticated user.
      type: apiKey
      in: cookie
      name: connect.sid